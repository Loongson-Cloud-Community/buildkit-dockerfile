name: buildkit/fronted-dockerfile image build

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: "0 0 1 * *" # 每月1号0点触发

jobs:
  prepare:
    runs-on: ubuntu-latest # 建议使用 ubuntu-latest，通常预装了更多常用工具，且更新及时
    outputs:
      # 这里的 output.tags 将会是一个 JSON 数组字符串
      tags: ${{ steps.set-tags.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 检出代码，以便可以访问 scripts 目录

      - name: Ensure OS ENV # 确保 jq 工具可用，因为 get-tags.sh 依赖它
        run: |
          ENV=$(cat /etc/os-release)
          echo "OS is $ENV"

      - name: Get latest patch versions of buildkit-frontend
        id: set-tags # 为此步骤设置一个 ID，以便在 outputs 中引用
        run: |
          # 执行你的脚本，它现在会直接输出一个 JSON 数组字符串
          TAGS_JSON=$(bash scripts/get-tags.sh)
          echo "Debug: Raw JSON output from get-tags.sh: $TAGS_JSON" # 调试信息

          # 验证输出是否为有效的 JSON (可选，但推荐用于调试)
          if ! echo "$TAGS_JSON" | jq -e . > /dev/null; then
            echo "Error: scripts/get-tags.sh did not output valid JSON."
            exit 1
          fi

          # 设置 GitHub Actions 的输出变量
          # 'tags' 是你自定义的输出变量名
          # $TAGS_JSON 是上面脚本执行的实际 JSON 数组字符串
          echo "tags=$TAGS_JSON" >> "$GITHUB_OUTPUT"

  build-image:
    needs: prepare # 依赖 prepare job
    runs-on: self-hosted # 保持与 prepare job 一致，或根据需要选择
    timeout-minutes: 60
    strategy:
      matrix:
        # fromJson 会将 prepare job 输出的 JSON 数组字符串解析成一个真正的数组，
        # 然后 matrix 会为数组中的每个元素创建一个 job 实例。
        tag: ${{ fromJson(needs.prepare.outputs.tags) }}
    env:
      BUILDKIT_VERSION: ${{ matrix.tag }} # 将当前矩阵的 tag 设置为环境变量
    steps:
      - uses: chenguohui/checkout@v3-node20
        with:
          ref: main # 确保检出的是 main 分支


      - name: Clone Repo
        run: |
          git clone --depth 1 -b ${{ matrix.tag }} https://github.com/moby/buildkit

      - name: Modify Dockerfile
        # 确保 scripts/modify.py 存在且可执行
        run: |
          python scripts/modify.py buildkit/frontend/dockerfile/cmd/dockerfile-frontend/Dockerfile > buildkit/frontend/dockerfile/cmd/dockerfile-frontend/Dockerfile.modify

      - name: Docker login # 添加 Docker 登录步骤
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # 使用秘密 DOCKER_USERNAME
          password: ${{ secrets.DOCKER_PASSWORD }} # 使用秘密 DOCKER_PASSWORD
          registry: lcr.loongnix.cn

      - name: Build Image
        run: |
          # 使用修改后的 Dockerfile.modify 来构建镜像
          DOCKER_TAG=$(echo "${{ matrix.tag }}" | sed 's|^dockerfile/||')
          cd buildkit && docker buildx build --load -t lcr.loongnix.cn/docker/dockerfile:"$DOCKER_TAG" -f frontend/dockerfile/cmd/dockerfile-frontend/Dockerfile.modify . && docker push lcr.loongnix.cn/docker/dockerfile:"$DOCKER_TAG"

      - name: Clean cache
        run: |
          rm -rf buildkit


